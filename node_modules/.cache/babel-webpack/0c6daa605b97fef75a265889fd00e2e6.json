{"ast":null,"code":"import _slicedToArray from \"C:/Users/AdamWo\\u017Aniakowski/Desktop/Studia/AI/plane-tickets-app-master(front)/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:/Users/AdamWo\\u017Aniakowski/Desktop/Studia/AI/plane-tickets-app-master(front)/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { stateChanges } from './state-changes';\nimport { fromRef } from '../observable/fromRef';\nimport { skipWhile, withLatestFrom, map, scan } from 'rxjs/operators';\nexport function auditTrail(query, events, scheduler) {\n  var auditTrail$ = stateChanges(query, events).pipe(scan(function (current, action) {\n    return [].concat(_toConsumableArray(current), [action]);\n  }, []));\n  return waitForLoaded(query, auditTrail$, scheduler);\n}\n\nfunction loadedData(query, scheduler) {\n  return fromRef(query, 'value', 'on', scheduler).pipe(map(function (data) {\n    var lastKeyToLoad;\n    data.payload.forEach(function (child) {\n      lastKeyToLoad = child.key;\n      return false;\n    });\n    return {\n      data: data,\n      lastKeyToLoad: lastKeyToLoad\n    };\n  }));\n}\n\nfunction waitForLoaded(query, action$, scheduler) {\n  var loaded$ = loadedData(query, scheduler);\n  return loaded$.pipe(withLatestFrom(action$), map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        loaded = _ref2[0],\n        actions = _ref2[1];\n\n    var lastKeyToLoad = loaded.lastKeyToLoad;\n    var loadedKeys = actions.map(function (snap) {\n      return snap.key;\n    });\n    return {\n      actions: actions,\n      lastKeyToLoad: lastKeyToLoad,\n      loadedKeys: loadedKeys\n    };\n  }), skipWhile(function (meta) {\n    return meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1;\n  }), map(function (meta) {\n    return meta.actions;\n  }));\n}","map":{"version":3,"sources":["C:/Users/AdamWoÅºniakowski/Desktop/Studia/AI/plane-tickets-app-master(front)/node_modules/@angular/fire/__ivy_ngcc__/database/es2015/list/audit-trail.js"],"names":["stateChanges","fromRef","skipWhile","withLatestFrom","map","scan","auditTrail","query","events","scheduler","auditTrail$","pipe","current","action","waitForLoaded","loadedData","data","lastKeyToLoad","payload","forEach","child","key","action$","loaded$","loaded","actions","loadedKeys","snap","meta","indexOf"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,iBAA7B;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,GAApC,EAAyCC,IAAzC,QAAqD,gBAArD;AACA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmCC,SAAnC,EAA8C;AACjD,MAAMC,WAAW,GAAGV,YAAY,CAACO,KAAD,EAAQC,MAAR,CAAZ,CACfG,IADe,CACVN,IAAI,CAAC,UAACO,OAAD,EAAUC,MAAV;AAAA,wCAAyBD,OAAzB,IAAkCC,MAAlC;AAAA,GAAD,EAA4C,EAA5C,CADM,CAApB;AAEA,SAAOC,aAAa,CAACP,KAAD,EAAQG,WAAR,EAAqBD,SAArB,CAApB;AACH;;AACD,SAASM,UAAT,CAAoBR,KAApB,EAA2BE,SAA3B,EAAsC;AAClC,SAAOR,OAAO,CAACM,KAAD,EAAQ,OAAR,EAAiB,IAAjB,EAAuBE,SAAvB,CAAP,CACFE,IADE,CACGP,GAAG,CAAC,UAAAY,IAAI,EAAI;AAClB,QAAIC,aAAJ;AACAD,IAAAA,IAAI,CAACE,OAAL,CAAaC,OAAb,CAAqB,UAAAC,KAAK,EAAI;AAC1BH,MAAAA,aAAa,GAAGG,KAAK,CAACC,GAAtB;AACA,aAAO,KAAP;AACH,KAHD;AAIA,WAAO;AAAEL,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,aAAa,EAAbA;AAAR,KAAP;AACH,GAPY,CADN,CAAP;AASH;;AACD,SAASH,aAAT,CAAuBP,KAAvB,EAA8Be,OAA9B,EAAuCb,SAAvC,EAAkD;AAC9C,MAAMc,OAAO,GAAGR,UAAU,CAACR,KAAD,EAAQE,SAAR,CAA1B;AACA,SAAOc,OAAO,CACTZ,IADE,CACGR,cAAc,CAACmB,OAAD,CADjB,EAC4BlB,GAAG,CAAC,gBAAuB;AAAA;AAAA,QAArBoB,MAAqB;AAAA,QAAbC,OAAa;;AAC1D,QAAIR,aAAa,GAAGO,MAAM,CAACP,aAA3B;AACA,QAAMS,UAAU,GAAGD,OAAO,CAACrB,GAAR,CAAY,UAAAuB,IAAI;AAAA,aAAIA,IAAI,CAACN,GAAT;AAAA,KAAhB,CAAnB;AACA,WAAO;AAAEI,MAAAA,OAAO,EAAPA,OAAF;AAAWR,MAAAA,aAAa,EAAbA,aAAX;AAA0BS,MAAAA,UAAU,EAAVA;AAA1B,KAAP;AACH,GAJqC,CAD/B,EAKHxB,SAAS,CAAC,UAAA0B,IAAI;AAAA,WAAIA,IAAI,CAACF,UAAL,CAAgBG,OAAhB,CAAwBD,IAAI,CAACX,aAA7B,MAAgD,CAAC,CAArD;AAAA,GAAL,CALN,EAKoEb,GAAG,CAAC,UAAAwB,IAAI;AAAA,WAAIA,IAAI,CAACH,OAAT;AAAA,GAAL,CALvE,CAAP;AAMH","sourcesContent":["import { stateChanges } from './state-changes';\nimport { fromRef } from '../observable/fromRef';\nimport { skipWhile, withLatestFrom, map, scan } from 'rxjs/operators';\nexport function auditTrail(query, events, scheduler) {\n    const auditTrail$ = stateChanges(query, events)\n        .pipe(scan((current, action) => [...current, action], []));\n    return waitForLoaded(query, auditTrail$, scheduler);\n}\nfunction loadedData(query, scheduler) {\n    return fromRef(query, 'value', 'on', scheduler)\n        .pipe(map(data => {\n        let lastKeyToLoad;\n        data.payload.forEach(child => {\n            lastKeyToLoad = child.key;\n            return false;\n        });\n        return { data, lastKeyToLoad };\n    }));\n}\nfunction waitForLoaded(query, action$, scheduler) {\n    const loaded$ = loadedData(query, scheduler);\n    return loaded$\n        .pipe(withLatestFrom(action$), map(([loaded, actions]) => {\n        let lastKeyToLoad = loaded.lastKeyToLoad;\n        const loadedKeys = actions.map(snap => snap.key);\n        return { actions, lastKeyToLoad, loadedKeys };\n    }), skipWhile(meta => meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1), map(meta => meta.actions));\n}\n//# sourceMappingURL=audit-trail.js.map"]},"metadata":{},"sourceType":"module"}