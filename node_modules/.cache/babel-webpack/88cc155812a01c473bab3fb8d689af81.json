{"ast":null,"code":"import { snapshotChanges as _snapshotChanges } from './snapshot-changes';\nimport { stateChanges as _stateChanges } from './state-changes';\nimport { auditTrail as _auditTrail } from './audit-trail';\nimport { createDataOperationMethod } from './data-operation';\nimport { createRemoveMethod } from './remove';\nimport { map } from 'rxjs/operators';\nexport function createListReference(query, afDatabase) {\n  var outsideAngularScheduler = afDatabase.schedulers.outsideAngular;\n  return {\n    query: query,\n    update: createDataOperationMethod(query.ref, 'update'),\n    set: createDataOperationMethod(query.ref, 'set'),\n    push: function push(data) {\n      return query.ref.push(data);\n    },\n    remove: createRemoveMethod(query.ref),\n    snapshotChanges: function snapshotChanges(events) {\n      return _snapshotChanges(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    stateChanges: function stateChanges(events) {\n      return _stateChanges(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    auditTrail: function auditTrail(events) {\n      return _auditTrail(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    valueChanges: function valueChanges(events) {\n      var snapshotChanges$ = _snapshotChanges(query, events, outsideAngularScheduler);\n\n      return snapshotChanges$.pipe(afDatabase.keepUnstableUntilFirst, map(function (actions) {\n        return actions.map(function (a) {\n          return a.payload.val();\n        });\n      }));\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/AdamWoÅºniakowski/Desktop/Studia/AI/plane-tickets-app-master(front)/node_modules/@angular/fire/__ivy_ngcc__/database/es2015/list/create-reference.js"],"names":["snapshotChanges","stateChanges","auditTrail","createDataOperationMethod","createRemoveMethod","map","createListReference","query","afDatabase","outsideAngularScheduler","schedulers","outsideAngular","update","ref","set","push","data","remove","events","pipe","keepUnstableUntilFirst","valueChanges","snapshotChanges$","actions","a","payload","val"],"mappings":"AAAA,SAASA,eAAe,IAAfA,gBAAT,QAAgC,oBAAhC;AACA,SAASC,YAAY,IAAZA,aAAT,QAA6B,iBAA7B;AACA,SAASC,UAAU,IAAVA,WAAT,QAA2B,eAA3B;AACA,SAASC,yBAAT,QAA0C,kBAA1C;AACA,SAASC,kBAAT,QAAmC,UAAnC;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,OAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAAoCC,UAApC,EAAgD;AACnD,MAAMC,uBAAuB,GAAGD,UAAU,CAACE,UAAX,CAAsBC,cAAtD;AACA,SAAO;AACHJ,IAAAA,KAAK,EAALA,KADG;AAEHK,IAAAA,MAAM,EAAET,yBAAyB,CAACI,KAAK,CAACM,GAAP,EAAY,QAAZ,CAF9B;AAGHC,IAAAA,GAAG,EAAEX,yBAAyB,CAACI,KAAK,CAACM,GAAP,EAAY,KAAZ,CAH3B;AAIHE,IAAAA,IAAI,EAAE,cAACC,IAAD;AAAA,aAAUT,KAAK,CAACM,GAAN,CAAUE,IAAV,CAAeC,IAAf,CAAV;AAAA,KAJH;AAKHC,IAAAA,MAAM,EAAEb,kBAAkB,CAACG,KAAK,CAACM,GAAP,CALvB;AAMHb,IAAAA,eANG,2BAMakB,MANb,EAMqB;AACpB,aAAOlB,gBAAe,CAACO,KAAD,EAAQW,MAAR,EAAgBT,uBAAhB,CAAf,CAAwDU,IAAxD,CAA6DX,UAAU,CAACY,sBAAxE,CAAP;AACH,KARE;AASHnB,IAAAA,YATG,wBASUiB,MATV,EASkB;AACjB,aAAOjB,aAAY,CAACM,KAAD,EAAQW,MAAR,EAAgBT,uBAAhB,CAAZ,CAAqDU,IAArD,CAA0DX,UAAU,CAACY,sBAArE,CAAP;AACH,KAXE;AAYHlB,IAAAA,UAZG,sBAYQgB,MAZR,EAYgB;AACf,aAAOhB,WAAU,CAACK,KAAD,EAAQW,MAAR,EAAgBT,uBAAhB,CAAV,CAAmDU,IAAnD,CAAwDX,UAAU,CAACY,sBAAnE,CAAP;AACH,KAdE;AAeHC,IAAAA,YAfG,wBAeUH,MAfV,EAekB;AACjB,UAAMI,gBAAgB,GAAGtB,gBAAe,CAACO,KAAD,EAAQW,MAAR,EAAgBT,uBAAhB,CAAxC;;AACA,aAAOa,gBAAgB,CAACH,IAAjB,CAAsBX,UAAU,CAACY,sBAAjC,EAAyDf,GAAG,CAAC,UAAAkB,OAAO;AAAA,eAAIA,OAAO,CAAClB,GAAR,CAAY,UAAAmB,CAAC;AAAA,iBAAIA,CAAC,CAACC,OAAF,CAAUC,GAAV,EAAJ;AAAA,SAAb,CAAJ;AAAA,OAAR,CAA5D,CAAP;AACH;AAlBE,GAAP;AAoBH","sourcesContent":["import { snapshotChanges } from './snapshot-changes';\nimport { stateChanges } from './state-changes';\nimport { auditTrail } from './audit-trail';\nimport { createDataOperationMethod } from './data-operation';\nimport { createRemoveMethod } from './remove';\nimport { map } from 'rxjs/operators';\nexport function createListReference(query, afDatabase) {\n    const outsideAngularScheduler = afDatabase.schedulers.outsideAngular;\n    return {\n        query,\n        update: createDataOperationMethod(query.ref, 'update'),\n        set: createDataOperationMethod(query.ref, 'set'),\n        push: (data) => query.ref.push(data),\n        remove: createRemoveMethod(query.ref),\n        snapshotChanges(events) {\n            return snapshotChanges(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n        },\n        stateChanges(events) {\n            return stateChanges(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n        },\n        auditTrail(events) {\n            return auditTrail(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n        },\n        valueChanges(events) {\n            const snapshotChanges$ = snapshotChanges(query, events, outsideAngularScheduler);\n            return snapshotChanges$.pipe(afDatabase.keepUnstableUntilFirst, map(actions => actions.map(a => a.payload.val())));\n        }\n    };\n}\n//# sourceMappingURL=create-reference.js.map"]},"metadata":{},"sourceType":"module"}