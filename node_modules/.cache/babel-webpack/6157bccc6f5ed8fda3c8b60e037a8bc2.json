{"ast":null,"code":"import { Observable, asyncScheduler } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\nexport function fromRef(ref, event) {\n  var listenType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'on';\n  var scheduler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : asyncScheduler;\n  return new Observable(function (subscriber) {\n    var fn = null;\n    fn = ref[listenType](event, function (snapshot, prevKey) {\n      scheduler.schedule(function () {\n        subscriber.next({\n          snapshot: snapshot,\n          prevKey: prevKey\n        });\n      });\n\n      if (listenType == 'once') {\n        scheduler.schedule(function () {\n          return subscriber.complete();\n        });\n      }\n    }, function (err) {\n      scheduler.schedule(function () {\n        return subscriber.error(err);\n      });\n    });\n\n    if (listenType == 'on') {\n      return {\n        unsubscribe: function unsubscribe() {\n          if (fn != null) {\n            ref.off(event, fn);\n          }\n        }\n      };\n    } else {\n      return {\n        unsubscribe: function unsubscribe() {}\n      };\n    }\n  }).pipe(map(function (payload) {\n    var snapshot = payload.snapshot,\n        prevKey = payload.prevKey;\n    var key = null;\n\n    if (snapshot.exists()) {\n      key = snapshot.key;\n    }\n\n    return {\n      type: event,\n      payload: snapshot,\n      prevKey: prevKey,\n      key: key\n    };\n  }), share());\n}","map":{"version":3,"sources":["C:/Users/AdamWoÅºniakowski/Desktop/Studia/AI/plane-tickets-app-master(front)/node_modules/@angular/fire/__ivy_ngcc__/database/es2015/observable/fromRef.js"],"names":["Observable","asyncScheduler","map","share","fromRef","ref","event","listenType","scheduler","subscriber","fn","snapshot","prevKey","schedule","next","complete","err","error","unsubscribe","off","pipe","payload","key","exists","type"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,cAArB,QAA2C,MAA3C;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,gBAA3B;AACA,OAAO,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,KAAtB,EAA4E;AAAA,MAA/CC,UAA+C,uEAAlC,IAAkC;AAAA,MAA5BC,SAA4B,uEAAhBP,cAAgB;AAC/E,SAAO,IAAID,UAAJ,CAAe,UAAAS,UAAU,EAAI;AAChC,QAAIC,EAAE,GAAG,IAAT;AACAA,IAAAA,EAAE,GAAGL,GAAG,CAACE,UAAD,CAAH,CAAgBD,KAAhB,EAAuB,UAACK,QAAD,EAAWC,OAAX,EAAuB;AAC/CJ,MAAAA,SAAS,CAACK,QAAV,CAAmB,YAAM;AACrBJ,QAAAA,UAAU,CAACK,IAAX,CAAgB;AAAEH,UAAAA,QAAQ,EAARA,QAAF;AAAYC,UAAAA,OAAO,EAAPA;AAAZ,SAAhB;AACH,OAFD;;AAGA,UAAIL,UAAU,IAAI,MAAlB,EAA0B;AACtBC,QAAAA,SAAS,CAACK,QAAV,CAAmB;AAAA,iBAAMJ,UAAU,CAACM,QAAX,EAAN;AAAA,SAAnB;AACH;AACJ,KAPI,EAOF,UAAAC,GAAG,EAAI;AACNR,MAAAA,SAAS,CAACK,QAAV,CAAmB;AAAA,eAAMJ,UAAU,CAACQ,KAAX,CAAiBD,GAAjB,CAAN;AAAA,OAAnB;AACH,KATI,CAAL;;AAUA,QAAIT,UAAU,IAAI,IAAlB,EAAwB;AACpB,aAAO;AACHW,QAAAA,WADG,yBACW;AACV,cAAIR,EAAE,IAAI,IAAV,EAAgB;AACZL,YAAAA,GAAG,CAACc,GAAJ,CAAQb,KAAR,EAAeI,EAAf;AACH;AACJ;AALE,OAAP;AAOH,KARD,MASK;AACD,aAAO;AAAEQ,QAAAA,WAAF,yBAAgB,CAAG;AAAnB,OAAP;AACH;AACJ,GAxBM,EAwBJE,IAxBI,CAwBClB,GAAG,CAAC,UAAAmB,OAAO,EAAI;AAAA,QACXV,QADW,GACWU,OADX,CACXV,QADW;AAAA,QACDC,OADC,GACWS,OADX,CACDT,OADC;AAEnB,QAAIU,GAAG,GAAG,IAAV;;AACA,QAAIX,QAAQ,CAACY,MAAT,EAAJ,EAAuB;AACnBD,MAAAA,GAAG,GAAGX,QAAQ,CAACW,GAAf;AACH;;AACD,WAAO;AAAEE,MAAAA,IAAI,EAAElB,KAAR;AAAee,MAAAA,OAAO,EAAEV,QAAxB;AAAkCC,MAAAA,OAAO,EAAPA,OAAlC;AAA2CU,MAAAA,GAAG,EAAHA;AAA3C,KAAP;AACH,GAPU,CAxBJ,EA+BHnB,KAAK,EA/BF,CAAP;AAgCH","sourcesContent":["import { Observable, asyncScheduler } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\nexport function fromRef(ref, event, listenType = 'on', scheduler = asyncScheduler) {\n    return new Observable(subscriber => {\n        let fn = null;\n        fn = ref[listenType](event, (snapshot, prevKey) => {\n            scheduler.schedule(() => {\n                subscriber.next({ snapshot, prevKey });\n            });\n            if (listenType == 'once') {\n                scheduler.schedule(() => subscriber.complete());\n            }\n        }, err => {\n            scheduler.schedule(() => subscriber.error(err));\n        });\n        if (listenType == 'on') {\n            return {\n                unsubscribe() {\n                    if (fn != null) {\n                        ref.off(event, fn);\n                    }\n                }\n            };\n        }\n        else {\n            return { unsubscribe() { } };\n        }\n    }).pipe(map(payload => {\n        const { snapshot, prevKey } = payload;\n        let key = null;\n        if (snapshot.exists()) {\n            key = snapshot.key;\n        }\n        return { type: event, payload: snapshot, prevKey, key };\n    }), share());\n}\n//# sourceMappingURL=fromRef.js.map"]},"metadata":{},"sourceType":"module"}